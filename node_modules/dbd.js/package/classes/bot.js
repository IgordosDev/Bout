const Discord = require("discord.js")

const Sequelize = require("sequelize")

const db = new Sequelize('database', 'user', 'password', {
  host: "localhost",
  dialect: "sqlite",
  logging: false,
  storage: "database.sqlite"
}) //done L :3

const variables = db.define("Variables", {
  variable: Sequelize.TEXT,
  varID: Sequelize.STRING,
  value: Sequelize.TEXT
})

const interpreter = require("../interpreter.js")

const opts = require("../utils/options")

const shardingClient = require("../handlers/shardingClient.js")

const client = new Discord.Client({
  partials: [
    "USER",
    "CHANNEL",
    "GUILD_MEMBER",
    "MESSAGE",
    "REACTION"
  ]
})

client.db = variables //ez w

const fs = require("fs")

client.servers = new Discord.Collection()
client.update_commands = new Discord.Collection()
client.join_commands = new Discord.Collection()
client.bot_commands = new Discord.Collection()
client.deleted_commands = new Discord.Collection()
client.variables = {}
client.statuses = new Discord.Collection()
client.leave_commands = new Discord.Collection()
client.awaited_commands = new Discord.Collection()
client.reaction_add_commands = new Discord.Collection()
client.reaction_remove_commands = new Discord.Collection()

const MessageUpdate = require("../events/messageUpdate.js")
const Message = require("../events/message.js")
const MessageDelete= require("../events/messageDelete.js")
const GuildMemberAdd = require("../events/guildMemberAdd.js")
const GuildMemberRemove = require("../events/guildMemberRemove.js")
const MessageReactionAdd = require("../events/messageReactionAdd.js")
const MessageReactionRemove = require("../events/messageReactionRemove.js")
class Client {
  constructor(options = {
    sharding: false,
    shardingOptions: {
      path: new String(),
      events: [],
      commands: new Discord.Collection(),
      awaitedCommands: new Discord.Collection() 
    }
  }) {

    if (options.sharding) {
      opts.token = options.token

      shardingClient(options)
      
      return console.log(`Remember sharding option is experimental...`)
    } 

    if (!options.token) throw new TypeError(`Token wasn't provided.`) 
    
    if (!options.prefix) throw new TypeError(`Prefix wasn't provided.`)
    
    client.prefix = typeof options.prefix === "string" ? [options.prefix] : options.prefix
    
    client.cookie = "CONSENT=YES+ES.es+; VISITOR_INFO1_LIVE=2gHB1_uMuoo; LOGIN_INFO=AFmmF2swRgIhAK4lvFwp--kgevd1xdodYZ3nW8QKLY7wz5zR8yS5bzzmAiEAs2pWg2oUVPZyaRTCR6rLh-21YZA9ipeaB2MlmlPrORU:QUQ3MjNmd09wTEt5V005RUkySEt5WFhvMW91X3pZZjVhVFVsZi1oUjBEUFJvNFU4WGF4dnhFYWpNajJoRjNNYzQ3TEpZVE82dVRlWC1RbGxhcmpNNzl6WkhzNWY2Y0VlX253ZFZPWVpadm01aU02cU5USjR5bzVkSjRLcUcyRkN5R1ZNSVc2RXJmVm1RNnBPa04yajFrdXlGWi1aZGFwSVk3cmZJOFZyczFvSVZIVk9BTklQYldtSHM2UEpwR25FODdkSnRZVjNkY18z; HSID=Ac9qnfQlymEiY3eY7; SSID=AdpzfM8954PT0lf8R; APISID=IYXlga4M74nr7vC7/A0VUPN2zQnMifxGaS; SAPISID=bTLSavD6XX-iOuwC/Ao6CGc24aWhR2uzH8; __Secure-3PAPISID=bTLSavD6XX-iOuwC/Ao6CGc24aWhR2uzH8; SID=2gcC3QJDDI5pUh3Wp3QD9xBpotWld7ZyFKlXrAITcd7HKVcmKnvXATWBhd6dJHNu8p8BhQ.; __Secure-3PSID=2gcC3QJDDI5pUh3Wp3QD9xBpotWld7ZyFKlXrAITcd7HKVcm_sD9bVF_5Kt0KARYPYlJUg.; PREF=al=es&f5=20000; YSC=WBfJn-tAkrs; SIDCC=AJi4QfENWa7dkfOVB2QBmBnbGw6cqSnTpJJ6PKn15cIJrmiPp2tqAS46haePtjyKL-e7uwtxVA; __Secure-3PSIDCC=AJi4QfH2L-itUEh8qs-1AOtnX-161H2b_jg3Y_zD-l1n8cWcya5F1G44oj-K_jEPhk63q-LULQ"
    
    client.login(options.token).catch(err => TypeError(`Invalid token`)) 
        client.on("ready", () => {
          
          variables.sync().then(idk => {
            console.log("Database connected!")
          })

          if (client.statuses.size) {
            let y = 0
            
            const f = async () => {
              //console.log(client.statuses.array()[y], y) 
              if (client.statuses.array()[y] === undefined) y === 0
              
              const status = client.statuses.array()[y]
              
              const t = await interpreter(client, {}, [], {name:"huh", code:status.text}, db, true)
              
              setTimeout(() => {
                client.user.setPresence({ 
                  activity: {
                    type: status.type,
                    name: t,
                    url: status.url
                  }, 
                  status: status.status
                }) 
                
                if (client.statuses.array()[y] === undefined) y = 0
                
                f()
              }, status.time * 1000)
              
              y++
            } 
            
            console.log("Running statuses.")
            
            f()
          }
          
      console.log(`Ready on client ${client.user.tag}`) 

          /*Disabled bcuz free
      client.user.setActivity(`Made by JS-Script, Support server: https://discord.gg/9pQWaH4`, {
        type: "PLAYING"
      })*/
    })
  } 

  deletedCommand(d = {}) {
    client.deleted_commands.set(Math.floor(Math.random() * 5838838494939), d) 
  }

  reactionAddCommand(d = {}) {
    client.reaction_add_commands.set(Math.floor(Math.random() * 5838838494939), d) 
  }

  reactionRemoveCommand(d = {}) {
    client.reaction_remove_commands.set(Math.floor(Math.random() * 5838838494939), d) 
  }

  awaitedCommand(d = {}) {
    client.awaited_commands.set(Math.floor(Math.random() * 5838838494939), d) 
  }
  
  leaveCommand(d = {}) {
    client.leave_commands.set(Math.floor(Math.random() * 5838838494939), d) 
  }
  
  updateCommand(d = {}) {
    client.update_commands.set(Math.floor(Math.random() * 5838838494939), d) 
  }

  joinCommand(d = {}) {
    
    if (!d.channel) throw new Error(`Join Command ${client.join_commands.size} needs a channel!`)
    
    if (!d.code) throw new Error(`Join Command ${client.join_commands.size} needs a code! `)
    
    d.id = Math.floor(Math.random() * 494993848489)
    
    client.join_commands.set(d.id, d) 
    
  } 
  
  status(d = {
    type: new String(),
    text: new String(),
    time: 12,
    url: new String() 
  }) {
    client.statuses.set(client.statuses.size, d) 
  }
  
  command(...args) {
    for (const d of args) {     
    if (!d.name) throw new TypeError(`Command ${client.bot_commands.size} needs a name!`)
    
    if (!d.code) throw new TypeError(`Command ${client.bot_commands.size} needs a code!`)
    
    d.id = Math.floor(Math.random() * 58939248388)
    
    client.bot_commands.set(d.id, d)
    
    }
  } 
  
  //others
  loadCommands(path, debug = false) {
    const folder = fs.readdirSync(path)

    if (debug) console.log(`Folder files size: ${folder.length}`)

    for (const commands of folder) {

      const dir = __dirname.split("/").length - 2

      const urlpath = "../".repeat(dir)

      const command = require(urlpath + path.replace(".", "") + `${commands}`)

      this.command({
        name: command.name,
        code: command.code
      })

      if (debug) {
        console.log(`Loaded command ${command.name}.`)
      }
    }
  }

  //events 
  onMessage(options = {
    guildOnly: false,
    respondToBots: true
  }) {

    client.messageEventOptions = options

    client.on("message", message => Message(client, message, db) ) 
  } 
  
  onJoined() {
    client.on("guildMemberAdd", member => GuildMemberAdd(client, member, db))
  } 

  onReactionAdd() {
    client.on("messageReactionAdd", (reaction, user) => MessageReactionAdd(client, reaction, user, db))
  }

  onReactionRemove() {
    client.on("messageReactionRemove", (reaction, user) => MessageReactionRemove(client, reaction, user, db))
  }

  onLeave() {
    client.on("guildMemberRemove", member => GuildMemberRemove(client, member, db))
  }

  onMessageUpdate() {
    client.on("messageUpdate", (omsg, msg) => MessageUpdate(client, omsg, msg, db))
  }
  
  onMessageDelete() {
    client.on("messageDelete", (msg) => MessageDelete(client, msg, db))
  }
  
  variables(op = {}) {
    client.variables = op
  }
}

String.prototype.deleteBrackets = function() {
  return this.split("[").join("#RIGHT#").split("]").join("#LEFT#").split(";").join("#COLON#").split("$").join("#CHAR#").split(">").join("#RIGHT_CLICK#").split("<").join("#LEFT_CLICK#").split("=").join("#EQUAL#")
}

String.prototype.addBrackets = function() {
  return this.split("#RIGHT#").join("[").split("#LEFT#").join("]").split("#COLON#").join(";").split("#CHAR#").join("$").split("#RIGHT_CLICK#").join(">").split("#LEFT_CLICK#").join("<").split("#EQUAL#").join("=")
}

String.prototype.replaceLast = function(find, replace) {
        var index = this.lastIndexOf(find);

        if (index >= 0) {
            return this.substring(0, index) + replace + this.substring(index + find.length);
        }

        return this.toString();
    }; 

module.exports = Client
